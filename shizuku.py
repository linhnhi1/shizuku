import os
import random
import asyncio
import re
import sqlite3
from pyrogram import Client, filters
from pyrogram.types import ChatPermissions

# -------------------------------
# TH√îNG TIN API ‚Äì thay ƒë·ªïi theo th√¥ng tin c·ªßa b·∫°n
# -------------------------------
API_ID = 22286680                # Thay b·∫±ng API ID c·ªßa b·∫°n
API_HASH = "a614a27fc39c3e54bf2e15da2a971e78"       # Thay b·∫±ng API Hash c·ªßa b·∫°n
BOT_TOKEN = "7573169920:AAFLHoWTkCQJLTyCqn9fpwMk_3iXm2FHiAc"     # Thay b·∫±ng Bot Token c·ªßa b·∫°n

# Danh s√°ch c√°c owner (c√°c owner n√†y ƒë∆∞·ª£c ph√©p d√πng l·ªánh qu·∫£n tr·ªã)
OWNER_IDS = [5867402532, 6370114941]  # VD: [5867402532, 123456789, 987654321]

# -------------------------------
# KH·ªûI T·∫†O DATABASE SQLite
# -------------------------------
DB_FILE = "data.db"

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id TEXT,
            user_id TEXT,
            first_name TEXT,
            last_name TEXT,
            username TEXT,
            joined INTEGER,
            PRIMARY KEY (chat_id, user_id)
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def save_user(chat_id, user, joined):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (chat_id, user_id, first_name, last_name, username, joined)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (str(chat_id),
          str(user.id),
          user.first_name,
          user.last_name,
          user.username,
          int(joined)))
    conn.commit()
    conn.close()

# -------------------------------
# H√ÄM CHUY·ªÇN ƒê·ªîI TH·ªúI GIAN (v√≠ d·ª•: 10s, 5m, 2h, 1d, 1w) th√†nh s·ªë gi√¢y
# -------------------------------
def convert_time_to_seconds(time_str):
    time_units = {"s": 1, "m": 60, "h": 3600, "d": 86400, "w": 604800}
    match = re.match(r"(\d+)([smhdw])", time_str)
    if match:
        value, unit = match.groups()
        return int(value) * time_units[unit]
    return None

# -------------------------------
# DANH S√ÅCH TH√îNG ƒêI·ªÜP
# -------------------------------
funny_messages = [
    "üöÄ {name} bay m√†u lu√¥n lu√¥n!",
    "üòÜ {name} v·ª´a du h√†nh qua kh√¥ng gian ·∫£o!",
    "üéâ {name} ƒë√£ ƒë∆∞·ª£c ph√≥ng th√≠ch!",
    "üòé {name} gi·ªù t·ª± do ƒë·ªÉ t√°n g·∫´u!",
    "üéä {name} v·ª´a ƒë∆∞·ª£c gi·∫£i ph√≥ng kh·ªèi ch·∫ø ƒë·ªô c·∫•m!",
    "üî• {name} v·ª´a tho√°t kh·ªèi tr·∫°i giam ·∫£o!",
    "üòÇ {name} ƒë√£ ƒë∆∞·ª£c b·∫•m n√∫t ph·ª•c h·ªìi quy·ªÅn!",
    "ü§© {name} gi·ªù ƒë√£ tr·ªü l·∫°i ƒë·ªânh cao chat!",
    "üéà {name} v·ª´a ƒë∆∞·ª£c tr·∫£ t·ª± do!",
    "ü•≥ {name} ƒë√£ b√πng n·ªï tr·ªü l·∫°i!"
]

missing_target_messages = [
    "‚ö†Ô∏è Vui l√≤ng cung c·∫•p ID, username ho·∫∑c reply tin nh·∫Øn c·ªßa th√†nh vi√™n c·∫ßn x·ª≠ l√Ω!",
    "‚ùå B·∫°n ch∆∞a ch·ªâ ƒë·ªãnh ƒë·ªëi t∆∞·ª£ng c·∫ßn x·ª≠ l√Ω!",
    "üö® Thi·∫øu th√¥ng tin, h√£y th·ª≠ l·∫°i!",
    "‚õî Kh√¥ng r√µ ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ ban/mute!",
    "‚ùì B·∫°n ƒë·ªãnh x·ª≠ l√Ω ai v·∫≠y?",
    "üòï Ch∆∞a th·∫•y th√¥ng tin, vui l√≤ng nh·∫≠p l·∫°i!",
    "üßê B·∫°n c√≥ qu√™n reply ho·∫∑c nh·∫≠p id kh√¥ng?",
    "üì¢ Kh√¥ng c√≥ th√¥ng tin, h√£y th·ª≠ l·∫°i!",
    "üîç Kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng!",
    "üö´ Vui l√≤ng cung c·∫•p ID, username ho·∫∑c reply cho ng∆∞·ªùi c·∫ßn x·ª≠ l√Ω!"
]

admin_protection_messages = [
    "S·∫øp ∆°i, n√≥ l√† admin ƒë√≥ b√¨nh tƒ©nhüê∂.",
    "N√†y n√†y, admin n√†y c√≤n gi√° tr·ªã l·ª£i d·ª•ng ƒë·∫•y s·∫øpüåö.",
    "H√£y v√†o c√†i ƒë·∫∑t sa th·∫£i admin r·ªìi ban ho·∫∑c mute nh√©!",
    "√îi, admin n√†y l√†m s·∫øp kh√¥ng vui, ƒë·ªÉ em x·ª≠ l√Ω cho!üêÆ"
]

group_greeting_messages = [
    "hello c√† nha, bot ƒë√£ ƒë·∫øn r·ªìi! üòÑ",
    "xin ch√†o nh√≥m, r·∫•t vui ƒë∆∞·ª£c g·∫∑p! ü§ó",
    "ch√†o m·ªçi ng∆∞·ªùi, bot ƒë√£ xu·∫•t hi·ªán! üòé",
    "hello team, c√πng vui n√†o! üéâ",
    "ch√†o m·ª´ng, bot ƒë·∫øn r·ªìi! üöÄ",
    "xin ch√†o, m√¨nh ƒë√¢y! üê±",
    "ch√†o nh√≥m, s·∫µn s√†ng b·∫•t ng·ªù! üåü",
    "hello, bot ƒë√£ ƒë·∫øn! üòÅ",
    "ch√†o c√°c b·∫°n, th·∫≠t h·∫°nh ph√∫c! üéà",
    "xin ch√†o, c√πng vui nh√©! üòÑ"
]

welcome_messages = [
    "ch√†o m·ª´ng b·∫°n! üòä", "xin ch√†o, vui v·∫ª nh√©! üòÑ", "ch√†o, m·ª´ng gia nh·∫≠p! üåü", "hello, ch√†o b·∫°n! üòç",
    "m·ª´ng b·∫°n, h√£y c∆∞·ªùi nh√©! üòä", "vui qu√°, b·∫°n ƒë·∫øn r·ªìi! üòÅ", "ch√†o, b·∫°n xinh l·∫Øm! üå∏", "m·ª´ng gia nh·∫≠p, c√πng vui! ü§ó",
    "ch√†o, t∆∞∆°i c∆∞·ªùi nh√©! üòÑ", "m·ª´ng b·∫°n v√†o nh√≥m! üòä", "ch√†o, b·∫°n th·∫≠t d·ªÖ th∆∞∆°ng! üòç", "m·ª´ng b·∫°n, c√πng c∆∞·ªùi! üòä",
    "xin ch√†o, vui l·∫Øm! üòÅ", "ch√†o, m·ª´ng b·∫°n v√†o nh√≥m! üå∏", "m·ª´ng b·∫°n, h√£y c∆∞·ªùi nh√©! üòä", "hello, b·∫°n ƒë√°ng y√™u! üòÑ",
    "ch√†o, m·ª´ng b·∫°n v√†o nh√≥m! üòä", "vui qu√°, ch√†o b·∫°n! üòç", "m·ª´ng b·∫°n, c∆∞·ªùi l√™n! üòä", "ch√†o, h√£y c√πng vui! ü§ó",
    "m·ª´ng b·∫°n, m·ªâm c∆∞·ªùi! üòä", "ch√†o, gia nh·∫≠p tuy·ªát! üòÑ", "xin ch√†o, b·∫°n d·ªÖ th∆∞∆°ng! üòç", "m·ª´ng b·∫°n, lu√¥n vui! üòä",
    "ch√†o, c∆∞·ªùi nh√©! üòä", "hello, gia nh·∫≠p vui! üòÅ", "ch√†o, m·ªâm c∆∞·ªùi n√†o! üòç", "m·ª´ng b·∫°n, th·∫≠t vui! üòä",
    "ch√†o, h√£y c∆∞·ªùi l√™n! üòÑ", "m·ª´ng b·∫°n, ch√†o m·ª´ng! üòä", "xin ch√†o, b·∫°n th·∫≠t xinh! üòÅ", "ch√†o m·ª´ng, m·ªâm c∆∞·ªùi nh√©! üòä",
    "ch√†o, gia nh·∫≠p c·ª±c vui! üòç", "xin ch√†o, c∆∞·ªùi th·∫≠t nhi·ªÅu! üòä", "m·ª´ng b·∫°n, th·∫≠t tuy·ªát! üòÑ", "ch√†o, vui c√πng nhau! üòä",
    "m·ª´ng b·∫°n, lu√¥n m·ªâm c∆∞·ªùi! üòÅ", "xin ch√†o, b·∫°n l√† ni·ªÅm vui! üòç", "ch√†o m·ª´ng, c∆∞·ªùi th·∫≠t t∆∞∆°i! üòä", "ch√†o, gia nh·∫≠p th·∫≠t vui! üòÑ",
    "m·ª´ng b·∫°n, h√£y c∆∞·ªùi l√™n! üòä", "xin ch√†o, b·∫°n th·∫≠t tuy·ªát! üòÅ", "ch√†o m·ª´ng, vui kh√¥n xi·∫øt! üòç", "ch√†o, gia nh·∫≠p r·∫°ng r·ª°! üòä",
    "m·ª´ng b·∫°n, c∆∞·ªùi th·∫≠t nhi·ªÅu! üòÑ", "xin ch√†o, lu√¥n t∆∞∆°i c∆∞·ªùi! üòä", "ch√†o m·ª´ng, b·∫°n l√† n·ª• c∆∞·ªùi! üòÅ", "ch√†o, vui qu√° khi g·∫∑p! üòç",
    "m·ª´ng b·∫°n, ch√∫c b·∫°n c∆∞·ªùi! üòä", "xin ch√†o, b·∫°n th·∫≠t m√°t! üòÑ", "ch√†o m·ª´ng, b·∫°n l√† √°nh s√°ng! üòä", "ch√†o, c√πng c∆∞·ªùi n√†o! üòÅ",
    "m·ª´ng b·∫°n, th·∫≠t h·∫°nh ph√∫c! üòç", "xin ch√†o, b·∫°n l√† ni·ªÅm vui! üòä", "ch√†o m·ª´ng, c∆∞·ªùi th·∫≠t l√™n! üòÑ", "ch√†o, b·∫°n th·∫≠t r·∫°ng r·ª°! üòä",
    "m·ª´ng b·∫°n, vui qu√°! üòÅ", "xin ch√†o, lu√¥n m·ªâm c∆∞·ªùi! üòç", "ch√†o m·ª´ng, b·∫°n l√†m vui! üòä", "ch√†o, gia nh·∫≠p h√¢n hoan! üòÑ",
    "m·ª´ng b·∫°n, c∆∞·ªùi th·∫≠t t∆∞∆°i! üòä", "xin ch√†o, b·∫°n c·ª±c k·ª≥ d·ªÖ th∆∞∆°ng! üòÅ", "ch√†o m·ª´ng, h√£y c∆∞·ªùi n√†o! üòç", "ch√†o, gia nh·∫≠p c√πng vui! üòä",
    "m·ª´ng b·∫°n, th·∫≠t tuy·ªát v·ªùi! üòÑ", "xin ch√†o, b·∫°n l√†m s√°ng nh√≥m! üòä", "ch√†o m·ª´ng, c√πng c∆∞·ªùi t∆∞∆°i! üòÅ", "ch√†o, vui kh√¥n xi·∫øt! üòç",
    "m·ª´ng b·∫°n, ch√∫c b·∫°n c∆∞·ªùi m√£i! üòä", "xin ch√†o, b·∫°n th·∫≠t ƒë√°ng y√™u! üòÑ", "ch√†o m·ª´ng, b·∫°n l√† ni·ªÅm h·∫°nh ph√∫c! üòä",
    "ch√†o, gia nh·∫≠p tuy·ªát c√∫! üòÅ", "m·ª´ng b·∫°n, c∆∞·ªùi th·∫≠t nhi·ªÅu! üòç", "xin ch√†o, b·∫°n l√† ƒëi·ªÅu tuy·ªát! üòä", "ch√†o m·ª´ng, c√πng vui v·∫ª! üòÑ",
    "ch√†o, b·∫°n th·∫≠t xinh x·∫Øn! üòä", "m·ª´ng b·∫°n, lu√¥n t∆∞∆°i c∆∞·ªùi! üòÅ", "xin ch√†o, b·∫°n l√†m nh√≥m th√™m vui! üòç", "ch√†o m·ª´ng, h√£y c∆∞·ªùi th·∫≠t t∆∞∆°i! üòä",
    "ch√†o, gia nh·∫≠p tr√†n ng·∫≠p vui! üòÑ", "m·ª´ng b·∫°n, c∆∞·ªùi cho t∆∞∆°i! üòÅ", "nice to see you, ch√†o nh√©! üòä"
]

# -------------------------------
# KH·ªûI T·∫†O CLIENT BOT
# -------------------------------
app = Client("bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# -------------------------------
# Decorator: ch·ªâ cho ph√©p c√°c owner s·ª≠ d·ª•ng l·ªánh qu·∫£n tr·ªã
# -------------------------------
def owner_only(func):
    async def wrapper(client, message):
        if message.from_user.id not in OWNER_IDS:
            await message.reply(random.choice(missing_target_messages))
            return
        return await func(client, message)
    return wrapper

# -------------------------------
# L·ªánh /xinfo ho·∫∑c /kiemtra: Xem th√¥ng tin ng∆∞·ªùi d√πng (S·ªï H·ªô Kh·∫©u)
# -------------------------------
@app.on_message(filters.command(["xinfo", "kiemtra"]) & (filters.group | filters.private))
async def xinfo_handler(client, message):
    # X√°c ƒë·ªãnh ƒë·ªëi t∆∞·ª£ng c·∫ßn ki·ªÉm tra:
    if message.reply_to_message:
        target = message.reply_to_message.from_user
        chat_id = message.chat.id
    else:
        args = message.text.split(maxsplit=1)
        if len(args) >= 2:
            identifier = args[1]
            if identifier.isdigit():
                identifier = int(identifier)
            try:
                target = await client.get_users(identifier)
            except Exception:
                await message.reply(f"‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi th√¥ng tin {args[1]}")
                return
            chat_id = message.chat.id if message.chat else None
        else:
            target = message.from_user
            chat_id = message.chat.id if message.chat else None

    info = "ü™™ **S·ªï H·ªô Kh·∫©u:**\n"
    info += f"**H·ªç:** {target.last_name if target.last_name else 'Kh√¥ng c√≥'}\n"
    info += f"**T√™n:** {target.first_name}\n"
    info += f"**ID:** `{target.id}`\n"
    info += f"**Username:** {'@' + target.username if target.username else 'Kh√¥ng c√≥'}\n"
    info += f"**H·ªì s∆°:** [Nh·∫•n v√†o ƒë√¢y](tg://user?id={target.id})\n"

    # X√°c ƒë·ªãnh tr·∫°ng th√°i theo vai tr√≤
    owner_statuses = ["Vua", "Tr√πm Cu·ªëi", "Ho√†ng Th∆∞·ª£ng", "Ch·ªß T·ªãch", "Tr√πm Mafia", "T·ªïng T∆∞ L·ªánh", "Hi·ªáu Tr∆∞·ªüng"]
    admin_statuses = ["C·∫≠n V·ªá", "ƒÇn B√°m", "L√≠nh C√≥ Quy·ªÅn Admin", "Quan L·ªõn", "H·ªô V·ªá", "Tay Sai"]
    member_statuses = ["Ng∆∞·ªùi H·∫ßu", "L√≠nh L√°t", "Th·ª±c T·∫≠p Sinh", "Ng∆∞·ªùi L·∫°", "Tr·∫ª S∆° Sinh"]

    role = ""
    # N·∫øu c√≥ th√¥ng tin chat (group) th√¨ ki·ªÉm tra quy·ªÅn:
    if chat_id:
        try:
            member = await client.get_chat_member(chat_id, target.id)
            if target.id in OWNER_IDS:
                role = random.choice(owner_statuses)
            elif member.status in ["administrator", "creator"]:
                role = random.choice(admin_statuses)
            else:
                role = random.choice(member_statuses)
        except Exception:
            role = random.choice(member_statuses)
    else:
        if target.id in OWNER_IDS:
            role = random.choice(owner_statuses)
        else:
            role = random.choice(member_statuses)
    icons = ["üî•", "üí•", "‚ú®", "üéâ", "üòé", "üöÄ", "üåü", "ü•≥", "üíé", "üîî"]
    info += f"**Tr·∫°ng th√°i:** {role} {random.choice(icons)}"
    await message.reply(info)

# -------------------------------
# L·ªánh /report: B√°o c√°o tin nh·∫Øn c·∫ßn report.
# M·ªçi ng∆∞·ªùi c√≥ th·ªÉ s·ª≠ d·ª•ng.
# -------------------------------
@app.on_message(filters.command("report"))
async def report_handler(client, message):
    if not message.reply_to_message:
        await message.reply("Vui l√≤ng tr·∫£ l·ªùi l·∫°i tin nh·∫Øn c·∫ßn b√°o c√°o.")
        return

    reported_msg = message.reply_to_message
    reporter = message.from_user
    reported_user = reported_msg.from_user

    reporter_fullname = reporter.first_name + ((" " + reporter.last_name) if reporter.last_name else "")
    group_report_message = f"{reporter_fullname} ƒë√£ g·ª≠i b√°o c√°o ƒëo·∫°n chat c·ªßa th√†nh vi√™n cho qu·∫£n tr·ªã vi√™n, ƒë·ªÅ ngh·ªã @OverFlowVIP ki·ªÉm tra v√† x·ª≠ l√Ω."
    await message.reply(group_report_message)

    if message.chat.username:
        message_link = f"https://t.me/{message.chat.username}/{reported_msg.message_id}"
    else:
        chat_id_str = str(message.chat.id)
        chat_link_id = chat_id_str.replace("-100", "") if chat_id_str.startswith("-100") else chat_id_str
        message_link = f"https://t.me/c/{chat_link_id}/{reported_msg.message_id}"

    reported_fullname = reported_user.first_name + ((" " + reported_user.last_name) if reported_user.last_name else "")
    report_details = (
        f"üìù B√°o c√°o t·ª´: {reporter_fullname} (ID: {reporter.id})\n"
        f"üë§ Ng∆∞·ªùi b·ªã b√°o c√°o: {reported_fullname} (ID: {reported_user.id}, Username: {'@'+reported_user.username if reported_user.username else 'Kh√¥ng c√≥'})\n"
        f"üí¨ N·ªôi dung: {reported_msg.text if reported_msg.text else '[Kh√¥ng c√≥ n·ªôi dung]'}\n"
        f"üîó Link: {message_link}"
    )
    for owner in OWNER_IDS:
        try:
            await client.send_message(owner, report_details)
        except Exception:
            pass

# -------------------------------
# L·ªánh /xban (alias /block): BLOCK (ban) theo ID/username ho·∫∑c reply.
# Xo√° tin nh·∫Øn n·∫øu d√πng reply. PM b√°o c√°o cho c√°c owner.
# -------------------------------
@app.on_message(filters.command(["xban", "block"]) & filters.group)
@owner_only
async def xban_user(client, message):
    args = message.text.split(maxsplit=3)
    if message.reply_to_message:
        try:
            await message.reply_to_message.delete()
        except Exception:
            pass
        user = message.reply_to_message.from_user
        maybe_time = args[1] if len(args) >= 2 and args[1][-1] in "smhdw" else None
        reason = args[2] if (maybe_time and len(args) >= 3) else (args[1] if len(args) >= 2 and not maybe_time else "Kh√¥ng c√≥ l√Ω do")
    else:
        if len(args) < 2:
            await message.reply(random.choice(missing_target_messages))
            return
        user_identifier = args[1]
        if user_identifier.isdigit():
            user_identifier = int(user_identifier)
        try:
            user = await client.get_users(user_identifier)
        except Exception:
            await message.reply(f"‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi th√¥ng tin {args[1]}")
            return
        maybe_time = args[2] if len(args) >= 3 and args[2][-1] in "smhdw" else None
        reason = args[3] if (maybe_time and len(args) >= 4) else (args[2] if len(args) >= 3 and not maybe_time else "Kh√¥ng c√≥ l√Ω do")
    
    chat_id = message.chat.id
    try:
        member = await client.get_chat_member(chat_id, user.id)
        if member.status in ["administrator", "creator"]:
            await message.reply(random.choice(admin_protection_messages))
            return
    except Exception:
        await message.reply(random.choice(admin_protection_messages))
        return

    duration_seconds = convert_time_to_seconds(maybe_time) if maybe_time else None
    try:
        await client.ban_chat_member(chat_id, user.id)
    except Exception as e:
        await message.reply(f"‚ùå Kh√¥ng th·ªÉ BLOCK ng∆∞·ªùi d√πng! L·ªói: {e}")
        return

    ban_message = f"üö® **ƒê√£ BLOCK ng∆∞·ªùi d√πng!**\n" \
                  f"üÜî **ID:** `{user.id}`\n" \
                  f"üë§ **H·ªç & T√™n:** {user.first_name} {user.last_name if user.last_name else ''}\n" \
                  f"üîó **Username:** {'@'+user.username if user.username else 'Kh√¥ng c√≥'}\n" \
                  f"üìå **H·ªì s∆°:** [Nh·∫•n v√†o ƒë√¢y](tg://user?id={user.id})\n" \
                  f"‚ùå **L√Ω do:** {reason}\n"
    if duration_seconds:
        ban_message += f"‚è≥ **Th·ªùi gian BLOCK:** {maybe_time}"
    else:
        ban_message += "üö∑ **BLOCK vƒ©nh vi·ªÖn!**"
    await message.reply(ban_message)

    pm_message = (f"[Ban Report]\nChat: {message.chat.title if message.chat.title else message.chat.id}\n"
                  f"User: {user.first_name} {user.last_name if user.last_name else ''} (ID: {user.id}, Username: {'@'+user.username if user.username else 'Kh√¥ng c√≥'})\n"
                  f"L√Ω do: {reason}")
    for owner in OWNER_IDS:
        try:
            await client.send_message(owner, pm_message)
        except Exception:
            pass

    if duration_seconds:
        await asyncio.sleep(duration_seconds)
        try:
            await client.unban_chat_member(chat_id, user.id)
            await message.reply(f"‚úÖ **{user.first_name} ƒë√£ ƒë∆∞·ª£c m·ªü BLOCK sau {maybe_time}!**\n" +
                                random.choice(funny_messages).format(name=user.first_name))
        except Exception as e:
            await message.reply(f"‚ùå Kh√¥ng th·ªÉ m·ªü BLOCK! L·ªói: {e}")

# -------------------------------
# L·ªánh /xmute (alias /xtuhinh): MUTE theo ID/username ho·∫∑c reply.
# Xo√° tin nh·∫Øn n·∫øu d√πng reply. PM b√°o c√°o cho c√°c owner.
# -------------------------------
@app.on_message(filters.command(["xmute", "xtuhinh"]) & filters.group)
@owner_only
async def xmute_user(client, message):
    args = message.text.split(maxsplit=3)
    if message.reply_to_message:
        try:
            await message.reply_to_message.delete()
        except Exception:
            pass
        user = message.reply_to_message.from_user
        maybe_time = args[1] if len(args) >= 2 and args[1][-1] in "smhdw" else None
        reason = args[2] if (maybe_time and len(args) >= 3) else (args[1] if len(args) >= 2 and not maybe_time else "Kh√¥ng c√≥ l√Ω do")
    else:
        if len(args) < 2:
            await message.reply(random.choice(missing_target_messages))
            return
        user_identifier = args[1]
        if user_identifier.isdigit():
            user_identifier = int(user_identifier)
        try:
            user = await client.get_users(user_identifier)
        except Exception:
            await message.reply(f"‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi th√¥ng tin {args[1]}")
            return
        maybe_time = args[2] if len(args) >= 3 and args[2][-1] in "smhdw" else None
        reason = args[3] if (maybe_time and len(args) >= 4) else (args[2] if len(args) >= 3 and not maybe_time else "Kh√¥ng c√≥ l√Ω do")
    
    chat_id = message.chat.id
    try:
        member = await client.get_chat_member(chat_id, user.id)
        if member.status in ["administrator", "creator"]:
            await message.reply(random.choice(admin_protection_messages))
            return
    except Exception:
        await message.reply(random.choice(admin_protection_messages))
        return

    duration_seconds = convert_time_to_seconds(maybe_time) if maybe_time else None
    try:
        await client.restrict_chat_member(chat_id, user.id, 
            ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_invite_users=True
            )
        )
    except Exception as e:
        await message.reply(f"‚ùå Kh√¥ng th·ªÉ MUTE ng∆∞·ªùi d√πng! L·ªói: {e}")
        return

    mute_message = f"üîá **ƒê√£ MUTE ng∆∞·ªùi d√πng!**\n" \
                   f"üÜî **ID:** `{user.id}`\n" \
                   f"üë§ **H·ªç & T√™n:** {user.first_name} {user.last_name if user.last_name else ''}\n" \
                   f"üîó **Username:** {'@'+user.username if user.username else 'Kh√¥ng c√≥'}\n" \
                   f"üìå **H·ªì s∆°:** [Nh·∫•n v√†o ƒë√¢y](tg://user?id={user.id})\n" \
                   f"‚ùå **L√Ω do:** {reason}\n"
    if duration_seconds:
        mute_message += f"‚è≥ **Th·ªùi gian MUTE:** {maybe_time}"
    else:
        mute_message += "üîï **MUTE vƒ©nh vi·ªÖn!**"
    await message.reply(mute_message)

    pm_message = (f"[Mute Report]\nChat: {message.chat.title if message.chat.title else message.chat.id}\n"
                  f"User: {user.first_name} {user.last_name if user.last_name else ''} (ID: {user.id}, Username: {'@'+user.username if user.username else 'Kh√¥ng c√≥'})\n"
                  f"L√Ω do: {reason}")
    for owner in OWNER_IDS:
        try:
            await client.send_message(owner, pm_message)
        except Exception:
            pass

    if duration_seconds:
        await asyncio.sleep(duration_seconds)
        full_permissions = ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_polls=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
            can_invite_users=True
        )
        try:
            await client.restrict_chat_member(chat_id, user.id, full_permissions)
            await message.reply(f"‚úÖ **{user.first_name} ƒë√£ ƒë∆∞·ª£c m·ªü MUTE sau {maybe_time}!**\n" +
                                random.choice(funny_messages).format(name=user.first_name))
        except Exception as e:
            await message.reply(f"‚ùå Kh√¥ng th·ªÉ m·ªü MUTE! L·ªói: {e}")

# -------------------------------
# L·ªánh /xanxa: G·ª° ban (unban) theo ID/username ho·∫∑c reply.
# -------------------------------
@app.on_message(filters.command("xanxa") & filters.group)
@owner_only
async def xanxa_user(client, message):
    args = message.text.split(maxsplit=2)
    if message.reply_to_message:
        user = message.reply_to_message.from_user
    else:
        if len(args) < 2:
            await message.reply(random.choice(missing_target_messages))
            return
        user_identifier = args[1]
        if user_identifier.isdigit():
            user_identifier = int(user_identifier)
        try:
            user = await client.get_users(user_identifier)
        except Exception:
            await message.reply(f"‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi th√¥ng tin {args[1]}")
            return
    chat_id = message.chat.id
    try:
        await client.unban_chat_member(chat_id, user.id)
        await message.reply(f"üïäÔ∏è **{user.first_name} ƒë√£ ƒë∆∞·ª£c x√≥a √°n BLOCK!**\n" +
                            random.choice(funny_messages).format(name=user.first_name))
    except Exception as e:
        await message.reply(f"‚ùå Kh√¥ng th·ªÉ x√≥a √°n ban! L·ªói: {e}")

# -------------------------------
# L·ªánh /xunmute: M·ªü mute v√† c·∫•p l·∫°i ƒë·∫ßy ƒë·ªß quy·ªÅn theo ID/username ho·∫∑c reply.
# (C√°c quy·ªÅn ƒë∆∞·ª£c c·∫•p l·∫°i bao g·ªìm: g·ª≠i tin nh·∫Øn, ·∫£nh, video, nh√£n d√°n/GIF, nh·∫°c, t·ªáp, tin nh·∫Øn tho·∫°i, tin nh·∫Øn video, g·ª≠i li√™n k·∫øt nh√∫ng)
# -------------------------------
@app.on_message(filters.command("xunmute") & filters.group)
@owner_only
async def xunmute_user(client, message):
    args = message.text.split(maxsplit=2)
    if message.reply_to_message:
        user = message.reply_to_message.from_user
    else:
        if len(args) < 2:
            await message.reply(random.choice(missing_target_messages))
            return
        user_identifier = args[1]
        if user_identifier.isdigit():
            user_identifier = int(user_identifier)
        try:
            user = await client.get_users(user_identifier)
        except Exception:
            await message.reply(f"‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi th√¥ng tin {args[1]}")
            return
    chat_id = message.chat.id
    full_permissions = ChatPermissions(
        can_send_messages=True,
        can_send_media_messages=True,
        can_send_polls=True,
        can_send_other_messages=True,
        can_add_web_page_previews=True,
        can_invite_users=True
    )
    try:
        await client.restrict_chat_member(chat_id, user.id, full_permissions)
        await message.reply(f"üé§ **{user.first_name} ƒë√£ ƒë∆∞·ª£c XUNMUTE v√† ƒë∆∞·ª£c c·∫•p l·∫°i ƒë·∫ßy ƒë·ªß quy·ªÅn!**\n" +
                            random.choice(funny_messages).format(name=user.first_name))
    except Exception as e:
        await message.reply(f"‚ùå Kh√¥ng th·ªÉ m·ªü mute! L·ªói: {e}")

# -------------------------------
# L·ªánh ‚Äúshizuku‚Äù: Cho ph√©p owner g·ªçi bot b·∫±ng c·ª•m ‚Äúshizuku ∆°i‚Äù ho·∫∑c ‚Äúshizuku,‚Äù.
# N·∫øu kh√¥ng c√≥ l·ªánh ph·ª•, bot li·ªát k√™ c√°c l·ªánh c√≥ s·∫µn.
# N·∫øu c√≥ l·ªánh: ban, block, mute, unban, unmute (ho·∫∑c ummute) sau c·ª•m g·ªçi,
# bot chuy·ªÉn ƒë·ªïi th√†nh l·ªánh t∆∞∆°ng ·ª©ng v√† th·ª±c thi (bao g·ªìm th·ªùi gian v√† l√Ω do).
# -------------------------------
@app.on_message(filters.regex(r"(?i)^shizuku(,| ∆°i)"))
async def shizuku_handler(client, message):
    if message.from_user.id not in OWNER_IDS:
        await message.reply("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return
    text = message.text.strip()
    if text.lower().startswith("shizuku ∆°i"):
        trigger_len = len("shizuku ∆°i")
    elif text.lower().startswith("shizuku,"):
        trigger_len = len("shizuku,")
    else:
        trigger_len = len("shizuku")
    command_text = text[trigger_len:].strip()
    if not command_text:
        await message.reply("B·∫°n c√≥ th·ªÉ d√πng:\n"
                            "shizuku ∆°i ban/block <ID/username> [th·ªùi gian] [l√Ω do]\n"
                            "shizuku ∆°i mute <ID/username> [th·ªùi gian] [l√Ω do]\n"
                            "shizuku ∆°i unban <ID/username>\n"
                            "shizuku ∆°i unmute/ummute <ID/username>")
        return
    parts = command_text.split()
    cmd = parts[0].lower()
    if cmd in ["ban", "block"]:
        new_text = "/xban " + " ".join(parts[1:])
        message.text = new_text
        await xban_user(client, message)
    elif cmd == "mute":
        new_text = "/xmute " + " ".join(parts[1:])
        message.text = new_text
        await xmute_user(client, message)
    elif cmd == "unban":
        new_text = "/xanxa " + " ".join(parts[1:])
        message.text = new_text
        await xanxa_user(client, message)
    elif cmd in ["unmute", "ummute"]:
        new_text = "/xunmute " + " ".join(parts[1:])
        message.text = new_text
        await xunmute_user(client, message)
    else:
        await message.reply("L·ªánh kh√¥ng h·ª£p l·ªá. B·∫°n c√≥ th·ªÉ d√πng: ban/block, mute, unban, unmute.")

# -------------------------------
# L·ªánh /kickbot: Kick bot ra kh·ªèi nh√≥m (ch·ªâ d√πng qua tin nh·∫Øn ri√™ng v·ªõi bot)
# -------------------------------
@app.on_message(filters.command("kickbot") & filters.private)
@owner_only
async def kickbot_handler(client, message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("Vui l√≤ng cung c·∫•p ID nh√≥m c·∫ßn kick bot ra.")
        return
    group_id = args[1]
    try:
        await client.leave_chat(group_id)
        await message.reply(f"ƒê√£ kick bot ra kh·ªèi nh√≥m {group_id}.")
    except Exception as e:
        await message.reply(f"Kh√¥ng th·ªÉ kick bot ra kh·ªèi nh√≥m {group_id}. L·ªói: {e}")

# -------------------------------
# L·ªánh /xinfo ho·∫∑c /kiemtra: Xem th√¥ng tin ng∆∞·ªùi d√πng (S·ªï H·ªô Kh·∫©u)
# -------------------------------
@app.on_message(filters.command(["xinfo", "kiemtra"]) & (filters.group | filters.private))
async def xinfo_handler(client, message):
    if message.reply_to_message:
        target = message.reply_to_message.from_user
        chat_id = message.chat.id
    else:
        args = message.text.split(maxsplit=1)
        if len(args) >= 2:
            identifier = args[1]
            if identifier.isdigit():
                identifier = int(identifier)
            try:
                target = await client.get_users(identifier)
            except Exception:
                await message.reply(f"‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi th√¥ng tin {args[1]}")
                return
            chat_id = message.chat.id if message.chat else None
        else:
            target = message.from_user
            chat_id = message.chat.id if message.chat else None

    info = "ü™™ **S·ªï H·ªô Kh·∫©u:**\n"
    info += f"**H·ªç:** {target.last_name if target.last_name else 'Kh√¥ng c√≥'}\n"
    info += f"**T√™n:** {target.first_name}\n"
    info += f"**ID:** `{target.id}`\n"
    info += f"**Username:** {'@' + target.username if target.username else 'Kh√¥ng c√≥'}\n"
    info += f"**H·ªì s∆°:** [Nh·∫•n v√†o ƒë√¢y](tg://user?id={target.id})\n"
    
    # X√°c ƒë·ªãnh tr·∫°ng th√°i theo vai tr√≤:
    owner_statuses = ["Vua", "Tr√πm Cu·ªëi", "Ho√†ng Th∆∞·ª£ng", "Ch·ªß T·ªãch", "Tr√πm Mafia", "T·ªïng T∆∞ L·ªánh", "Hi·ªáu Tr∆∞·ªüng"]
    admin_statuses = ["C·∫≠n V·ªá", "ƒÇn B√°m", "L√≠nh C√≥ Quy·ªÅn Admin", "Quan L·ªõn", "H·ªô V·ªá", "Tay Sai"]
    member_statuses = ["Ng∆∞·ªùi H·∫ßu", "L√≠nh L√°t", "Th·ª±c T·∫≠p Sinh", "Ng∆∞·ªùi L·∫°", "Tr·∫ª S∆° Sinh"]
    role = ""
    if chat_id:
        try:
            member = await client.get_chat_member(chat_id, target.id)
            if target.id in OWNER_IDS:
                role = random.choice(owner_statuses)
            elif member.status in ["administrator", "creator"]:
                role = random.choice(admin_statuses)
            else:
                role = random.choice(member_statuses)
        except Exception:
            role = random.choice(member_statuses)
    else:
        if target.id in OWNER_IDS:
            role = random.choice(owner_statuses)
        else:
            role = random.choice(member_statuses)
    icons = ["üî•", "üí•", "‚ú®", "üéâ", "üòé", "üöÄ", "üåü", "ü•≥", "üíé", "üîî"]
    info += f"**Tr·∫°ng th√°i:** {role} {random.choice(icons)}"
    await message.reply(info)

# -------------------------------
# Ch·∫°y bot
# -------------------------------
app.run()
